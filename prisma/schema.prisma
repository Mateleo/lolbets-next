generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id            String    @id
  name          String?
  image         String?
  email         String?   @unique
  emailVerified DateTime?
  discordId     String    @unique
  points        Int       @default(500)
  Account       Account[]
  Bet           Bet[]
  Session       Session[]
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Bet {
  id      String @id
  amount  Int
  matchId Int
  teamId  Int
  userId  String
  Match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  Team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id        Int       @id
  position  Int
  status    Status
  begin_at  DateTime?
  end_at    DateTime?
  complete  Boolean
  finished  Boolean
  length    Int?
  winner_id Int?
  match_id  Int
  Match     Match     @relation(fields: [match_id], references: [id], onDelete: Cascade)
}

model League {
  id        Int     @id
  image_url String?
  name      String
  slug      String
  Match     Match[]
}

model Match {
  id                         Int       @id
  begin_at                   DateTime?
  end_at                     DateTime?
  name                       String
  slug                       String
  number_of_games            Int
  scheduled_at               DateTime
  status                     Status
  league_id                  Int?
  winner_id                  Int?
  bets_distributed           Boolean   @default(false)
  stream                     String?
  Bet                        Bet[]
  Game                       Game[]
  League                     League?   @relation(fields: [league_id], references: [id], onDelete: Cascade)
  Team_Match_winner_idToTeam Team?     @relation("Match_winner_idToTeam", fields: [winner_id], references: [id])
  Team_MatchToTeam           Team[]    @relation("MatchToTeam")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id                          Int     @id
  acronym                     String
  image_url                   String
  location                    String?
  name                        String
  slug                        String
  Bet                         Bet[]
  Match_Match_winner_idToTeam Match[] @relation("Match_winner_idToTeam")
  Match_MatchToTeam           Match[] @relation("MatchToTeam")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  not_started
  running
  finished
  canceled
}
